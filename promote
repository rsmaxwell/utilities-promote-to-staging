#!/bin/bash

#**************************************************************
# Find the latest version of 'utilities-test'
#**************************************************************
rm -rf /tmp/latest-* stdout.txt stderr.txt

tempdir=$(mktemp -d -t latest-XXXXXXXXXX)
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

currentdir=$(pwd)
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

cd ${tempdir}
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

pom="pom.xml"
cat >${pom} <<'EOT'
<project>
	<modelVersion>4.0.0</modelVersion>

	<groupId>junk</groupId>
	<artifactId>junk</artifactId>
	<version>1.0-SNAPSHOT</version>

	<dependencies>
		<dependency>
			<groupId>com.rsmaxwell.utilities</groupId>
			<artifactId>utilities-test</artifactId>
			<version>1</version>
		</dependency>
	</dependencies>

	<repositories>
		<repository>
			<id>internal</id>
			<url>https://server.rsmaxwell.co.uk/archiva/repository/internal</url>
		</repository>
	</repositories>

</project>
EOT

mvn versions:use-latest-releases 1>stdout.txt 2>stderr.txt
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "----[ stdout ]--------------------------"
    cat stdout.txt
    echo "----[ stdout ]--------------------------"
    cat stderr.txt
    echo "----------------------------------------"
    echo "result: ${result}"
    exit 1
fi

line=$(grep "<version>" pom.xml | head -n 2 | tail -n 1)
if [ ${#line} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "latestVersion_utilities_test is empty"
    exit 1
fi

regex="<version>(.*)</version>"
if [[ ! ${line} =~ ${regex} ]]; then
    echo "Error: $0[${LINENO}]"
    echo "latestVersion_utilities_test is empty"
    # exit 1
fi

version_utilities_test="${BASH_REMATCH[1]}"
echo "version_utilities_test: ${version_utilities_test}"

mvn dependency:resolve 1>stdout.txt 2>stderr.txt
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "----[ stdout ]--------------------------"
    cat stdout.txt
    echo "----[ stdout ]--------------------------"
    cat stderr.txt
    echo "----------------------------------------"
    echo "result: ${result}"
    exit 1
fi

cd ${currentdir}
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

rm -rf ${tempdir}
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

#**************************************************************
# Find the version of 'utilities' that 'utilities-test' was built with
#**************************************************************
GROUPID="com.rsmaxwell.utilities"
ARTIFACTID="utilities-test"
VERSION="${version_utilities_test}"
PACKAGING="jar"

jarfile=${HOME}/.m2/repository/${GROUPID//.//}/${ARTIFACTID}/${VERSION}/${ARTIFACTID}-${VERSION}.${PACKAGING}

versionjson=$(java -cp ${jarfile} com.rsmaxwell.utilities_test.Version)
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

utilities_version=$(echo ${versionjson} | jq .utilities_version)
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

pathname="${HOME}/workspace/utilities-promote-to-staging/utilities_version"
cat >${pathname} <<EOT2
export utilities_version=${utilities_version}
EOT2

#**************************************************************
# Deploy 'utilities' to 'staging'
#**************************************************************

REPOSITORY_URL="https://server.rsmaxwell.co.uk/archiva/repository"
REPOSITORYID="staging"
REPOSITORY="staging"
GROUPID="com.rsmaxwell.utilities"
ARTIFACTID="utilities"
VERSION=${utilities_version}
PACKAGING="jar"

URL=${REPOSITORY_URL}/${REPOSITORY}/
FILENAME=${JOB_NAME}-${GOARCH}-${GOOS}-${BUILD_ID}.${PACKAGING}

cd ${WORKSPACE}/bin
zip ${FILENAME} *

mvn --batch-mode deploy:deploy-file \
	-DgroupId=${GROUPID} \
	-DartifactId=${ARTIFACTID} \
	-Dversion=${VERSION} \
	-Dpackaging=${PACKAGING} \
	-Dfile=${FILENAME} \
	-DrepositoryId=${REPOSITORYID} \
	-Durl=${URL}
